# Results


```{r,warning=FALSE}
suppressMessages(library(tidyverse))
suppressMessages(library(readr))
suppressMessages(library(visdat))    
suppressMessages(library(skimr))   
suppressMessages(library(ggdendro))
suppressMessages(library(ggridges))
suppressMessages(library(tidyverse))
suppressMessages(library(sf))
suppressMessages(library(tigris))
suppressMessages(library(treemapify))
suppressMessages(library(treemap))

```

```{r}
data <- read_csv("Graduate Results.csv", 
                 show_col_types = FALSE)
```


```{r}
data_clean <- data |>
  select(-`# SACC (IEP Diploma)`, 
         -`% SACC (IEP Diploma) of Cohort`, 
         -`# TASC (GED)`, 
         -`% TASC (GED) of Cohort`)
```

```{r,warning=FALSE}
# Convert specific columns to numeric
numeric_columns <- c("# Total Cohort", "# Grads", "% Grads", "# Total Regents",
                     "% Total Regents of Cohort", "% Total Regents of Grads", 
                     "# Advanced Regents", "% Advanced Regents of Cohort", 
                     "% Advanced Regents of Grads", "# Regents without Advanced",
                     "% Regents without Advanced of Cohort", 
                     "% Regents without Advanced of Grads", "# Local", 
                     "% Local of Cohort", "% Local of Grads", "# Still Enrolled", 
                     "% Still Enrolled", "# Dropout", "% Dropout")

data_clean[numeric_columns] <- lapply(data_clean[numeric_columns], function(x) as.numeric(as.character(x)))

```

```{r}
ggplot(data_clean, aes(x = as.factor(`Cohort Year`))) +
  geom_bar(position = "dodge", fill = "lightblue") +  # Change 'color' to 'fill' for the bar color
  labs(title = "Count of Students by Cohort Year",
       x = "Cohort Year", y = "Count") +
  theme_minimal()
```
```{r,warning=FALSE}
# Histogram
ggplot(data_clean, aes(x = `% Grads`)) +
  geom_histogram(binwidth = 5, fill = "steelblue", color = "black", alpha = 0.7) +
  labs(title = "Distribution of % Grads",
       x = "% Grads", y = "Frequency") +
  theme_minimal()

```

```{r,warning=FALSE}
# Cleveland Dot Plot
aggregated_data <- data_clean |>
  group_by(Category) |>
  summarize(mean_grads = mean(`% Grads`, na.rm = TRUE))

# Cleveland dot plot of aggregated data
ggplot(aggregated_data, aes(x = mean_grads, y = reorder(Category, mean_grads))) +
  geom_point(color = "darkblue", size = 3) +
  labs(title = "Average Graduation Rates by Category",
       x = "Mean % Grads", y = "Category") +
  theme_minimal()
```

```{r,warning=FALSE}
top_categories <- data_clean %>%
  group_by(Category) %>%
  summarise(median_value = median(`% Advanced Regents of Cohort`, na.rm = TRUE)) %>%
  arrange(desc(median_value)) %>%
  slice_head(n = 10) %>% # Adjust 'n' to include fewer or more categories
  pull(Category)

filtered_data <- data_clean %>%
  filter(Category %in% top_categories)

# Ridgeline Plot
ggplot(filtered_data, aes(x = `% Advanced Regents of Cohort`, y = fct_reorder(Category, `% Advanced Regents of Cohort`, .fun = median), fill = Category)) +
  geom_density_ridges(scale = 2, alpha = 0.8) +
  labs(
    title = "Distribution of Advanced Regents Percentage by Top Categories",
    x = "Advanced Regents (% of Cohort)",
    y = "Category"
  ) +
  theme_ridges(center_axis_labels = TRUE) +
  theme(
    axis.text.y = element_text(size = 10),
    legend.position = "none"
  ) +
  scale_fill_viridis_d()

```
```{r}

# Assuming the 'data_clean' dataframe is already prepared

# Create a new column to categorize the data
data_clean <- data_clean %>%
  mutate(
    Graduation_Status = case_when(
      `% Grads` >= 80 ~ "Graduated",
      `% Dropout` >= 10 ~ "Dropout",
      TRUE ~ "Not Graduated"
    )
  )

# Group by 'Cohort Year' and 'Graduation Status' and calculate the counts
data_grouped <- data_clean %>%
  group_by(`Cohort Year`, Graduation_Status) %>%
  summarise(count = n(), .groups = 'drop')

# Create the diverging stacked bar chart
ggplot(data_grouped, aes(x = `Cohort Year`, y = count, fill = Graduation_Status)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  coord_flip() +
  labs(title = "Diverging Stacked Bar Chart of Graduation Status by Cohort Year",
       x = "Cohort Year",
       y = "Percentage",
       fill = "Graduation Status") +
  scale_fill_manual(values = c("Graduated" = "blue", "Dropout" = "lightblue", "Not Graduated" = "lightgrey")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```
```{r,warning=FALSE}
# Load required libraries


# Load NYC borough shapefile using tigris
nyc_boroughs <- counties(state = "NY", cb = TRUE, progress = FALSE) %>%
  filter(NAME %in% c("New York", "Richmond", "Queens", "Kings", "Bronx"))

# Load dataset
# Replace 'data' with your dataset containing graduation rates and borough information
data_b <- tibble(
  Borough = c("Manhattan", "Staten Island", "Queens", "Brooklyn", "Bronx"),
  GradRate = c(85.3, 82.5, 83.7, 81.2, 77.5)
)

# Map borough names to match shapefile
data_b <- data_b %>%
  mutate(
    NAME = case_when(
      Borough == "Manhattan" ~ "New York",
      Borough == "Staten Island" ~ "Richmond",
      Borough == "Brooklyn" ~ "Kings",
      TRUE ~ Borough
    )
  )

# Merge shapefile and data
nyc_boroughs <- nyc_boroughs %>%
  left_join(data_b, by = "NAME")

# Plot the choropleth with labels and sequential blue color scheme
ggplot(nyc_boroughs) +
  geom_sf(aes(fill = GradRate), color = "black") +
  geom_sf_text(aes(label = Borough), size = 4, color = "black") +
  scale_fill_distiller(palette = "Blues", direction = 1, name = "Grad Rate (%)") +
  labs(
    title = "NYC Borough-Wise Graduation Rates",
    subtitle = "Filtered for Accurate Boroughs with Proper Labels",
    caption = "Data Source: NYC Graduation Rates Dataset"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    legend.position = "bottom"
  )
```
```{r}


# Preprocessing: Filter out "All Students" and other broad categories
filtered_treemap_data <- data_clean%>%
  filter(
    `Report Category` == "Citywide",
    !`Category` %in% c("All Students", "Not SWD", "Not ELL")
  ) %>%
  mutate(
     `# Total Cohort` = as.numeric(`# Total Cohort`)) %>%
  group_by(`Category`) %>%
  summarise(Total_Cohort = sum(`# Total Cohort`, na.rm = TRUE)) %>%
  arrange(desc(Total_Cohort))

# Treemap with filtered data
ggplot(filtered_treemap_data, aes(area = Total_Cohort, fill = Total_Cohort, label = Category)) +
  geom_treemap() +
  geom_treemap_text(
    fontface = "bold", 
    colour = "white", 
    place = "centre", 
    size = 5
  ) +
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Cohort Size") +
  labs(
    title = "Filtered Treemap of Total Cohort Sizes by Category",
    subtitle = "Excluding Broad Categories for Better clarity"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    legend.position = "bottom"
  )
```
```{r}

# Preprocessing
stacked_data <- data_clean %>%
  filter(`Report Category` == "Citywide") %>%
  mutate(
    `# Advanced Regents` = as.numeric(`# Advanced Regents`),
    `# Local` = as.numeric(`# Local`),
    `# Grads` = as.numeric(`# Grads`)
  ) %>%
  group_by(`Cohort Year`) %>%
  summarise(
    Advanced_Regents = sum(`# Advanced Regents`, na.rm = TRUE),
    Local = sum(`# Local`, na.rm = TRUE),
    Total_Grads = sum(`# Grads`, na.rm = TRUE)
  ) %>%
  mutate(
    Advanced_Regents_Perc = Advanced_Regents / Total_Grads * 100,
    Local_Perc = Local / Total_Grads * 100
  )

# Reshape for plotting
stacked_data_long <- stacked_data %>%
  pivot_longer(cols = c(Advanced_Regents_Perc, Local_Perc), names_to = "Diploma Type", values_to = "Percentage")

# Plot with adjusted scale and new color scheme
ggplot(stacked_data_long, aes(x = factor(`Cohort Year`), y = Percentage, fill = `Diploma Type`)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(
    values = c("Advanced_Regents_Perc" = "lightblue", "Local_Perc" = "blue"),
    labels = c("Advanced Regents", "Local")
  ) +
  labs(
    title = "Distribution of Diploma Types Over Time",
    subtitle = "Focusing on Lower Percentage Bars",
    x = "Cohort Year",
    y = "Percentage of Graduates",
    fill = "Diploma Type"
  ) +
  coord_cartesian(ylim = c(0, 50)) + # Adjust scale to focus on lower bars
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    legend.position = "right",
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```
```{r}

# Preprocessing
stacked_data <- data_clean %>%
  filter(`Report Category` == "Citywide") %>%
  mutate(
    `# Advanced Regents` = as.numeric(`# Advanced Regents`),
    `# Local` = as.numeric(`# Local`),
    `# Grads` = as.numeric(`# Grads`)
  ) %>%
  group_by(`Cohort Year`) %>%
  summarise(
    Advanced_Regents = sum(`# Advanced Regents`, na.rm = TRUE),
    Local = sum(`# Local`, na.rm = TRUE),
    Total_Grads = sum(`# Grads`, na.rm = TRUE)
  ) %>%
  mutate(
    Advanced_Regents_Perc = Advanced_Regents / Total_Grads * 100,
    Local_Perc = Local / Total_Grads * 100
  )

# Reshape for plotting
stacked_data_long <- stacked_data %>%
  pivot_longer(cols = c(Advanced_Regents_Perc, Local_Perc), names_to = "Diploma Type", values_to = "Percentage")

ggplot(stacked_data_long, aes(x = factor(`Cohort Year`), y = Percentage, fill = `Diploma Type`)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_y_log10() +  # Apply log transformation
  labs(
    title = "Distribution of Diploma Types Over Time",
    subtitle = "Log Transformation Applied to Y-Axis for Better Visibility",
    x = "Cohort Year",
    y = "Log-Scaled Percentage of Graduates",
    fill = "Diploma Type"
  ) +
  scale_fill_manual(values = c("lightblue", "blue")) +  # Consistent colors
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r,warning=FALSE}
line_chart_data <- data_clean %>%
  filter(`Report Category` == "Borough") %>%
  mutate(`% Grads` = as.numeric(`% Grads`)) %>%
  group_by(`Geographic Subdivision`, `Cohort Year`) %>%
  summarise(Average_Grads = mean(`% Grads`, na.rm = TRUE), .groups = "keep") %>%
  drop_na(Average_Grads)

# Plot
ggplot(line_chart_data, aes(x = factor(`Cohort Year`), y = Average_Grads, color = `Geographic Subdivision`, group = `Geographic Subdivision`)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Trends in Graduation Rates by Borough",
    x = "Cohort Year",
    y = "Average Graduation Rate (%)",
    color = "Borough"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r,warning=FALSE}
data_borough <- data_clean |> filter(`Report Category` == "Borough")
ggplot(data_borough, aes(x = `% Grads`)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Graduation Percentages in different Boroughs", x = "Graduation Percentage", y = "Count")+
  facet_wrap(~`Geographic Subdivision`)


```
```{r}
#| fig-width: 8
#| fig-height: 10

filtered_data <- data_clean %>%
  filter(Category == "All Students", `Report Category` == "School") %>%
  group_by(Cohort) %>%  # Group by cohort first
  slice_max(`# Dropout`, n = 10) %>%  # Get the top 10 schools for each cohort
  ungroup()

ggplot(filtered_data, aes(x = `# Dropout`, y = reorder(`School Name`, `# Dropout`))) +
  geom_point(size = 4, color = "lightblue") +
  facet_wrap(~ Cohort, ncol = 1, scales = "free_y") +  # Facet by cohort
  labs(title = "Top 10 Schools by Dropout Rate Faceted by Cohort",
       x = "Number of Dropouts",
       y = "School") +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"),  # Bold facet labels
        axis.text.y = element_text(size = 5),     # Adjust y-axis text size
        axis.text.x = element_text(size = 9))     # Adjust x-axis text size



```

```{r,warning=FALSE}
ggplot(data_clean, aes(x = `Cohort Year`)) +
  geom_bar(aes(y = `# Total Cohort`), stat = "identity", fill = "lightblue", position = "dodge") +
  geom_bar(aes(y = `# Total Regents`), stat = "identity", fill = "darkblue", alpha = 0.5, position = "dodge") +
  theme_minimal() +
  labs(title = "Total Cohort and Total Regents per Cohort Year", 
       x = "Cohort Year", 
       y = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}

# Filter dataset for borough-level data
borough_data <- data_clean %>%
  filter(`Geographic Subdivision` %in% c("Manhattan", "Brooklyn", "Queens", "Bronx", "Staten Island") & !is.na(`% Grads`))
borough_data$`Geographic Subdivision` <- factor(borough_data$`Geographic Subdivision`, levels = c("Manhattan", "Brooklyn", "Queens", "Bronx", "Staten Island"))
borough_data$Category <- factor(borough_data$Category, levels = unique(borough_data$Category))
ggplot(borough_data, aes(x = Category, y = `Geographic Subdivision`, fill = `% Grads`)) +
  geom_tile(color = "white") +  # Add white grid lines for clarity
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "% Grads") +
  labs(
    title = "Graduation Rates by Borough and Demographic Category",
    x = "Demographic Category",
    y = "Borough"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5)
)



```




```{r}
ggplot(data_clean, aes(x = `# Advanced Regents`, y = `% Grads`)) +
  geom_point(aes(color = `Cohort Year`), alpha = 0.7) +
  theme_minimal() +
  labs(title = "Correlation Between % Advanced Regents and % Grads", 
       x = "% Advanced Regents",
       y = "% Grads")
```

```{r,warning=FALSE}
ggplot(data_clean, aes(x = `% Still Enrolled`)) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  geom_density(aes(x = `% Dropout`), fill = "darkblue", alpha = 0.5) +
  theme_minimal() +
  labs(title = "Density Plot of % Still Enrolled vs % Dropout", x = "% Enrolled / Dropout", y = "Density")+
  scale_x_log10()

```


```{r}
data_tree <- data_clean |> filter(`Report Category` == "Borough")
treemap(data_tree, 
        index = c("Geographic Subdivision", "Category"), 
        vSize = "# Total Cohort", 
        vColor = "% Grads", 
        draw = TRUE)

```


